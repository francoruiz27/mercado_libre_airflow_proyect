from airflow import DAG
from airflow.providers.postgres.operators.postgres import PostgresOperator
from airflow.operators.python_operator import PythonOperator
from airflow.hooks.postgres_hook import PostgresHook
from datetime import datetime
import json
import requests as r
from datetime import date
from email.message import EmailMessage
import smtplib
import ssl

def _send_email(ti):
    # Define email sender and receiver
    email_sender = 'ruizfranco2812@gmail.com'
    email_password = 'your_password'    #generated by gmail
    email_receiver = 'franck2812@hotmail.com'

    # Set the subject and body of the email
    subject = 'Some microwaves surpass 7M in sales'
    content = ti.xcom_pull(key='microwaves_over_7M', task_ids=['select_mw_data'])[0]
    body = 'These are the microwaves:\n'
    for source in content:
        body = body + f'''
        id: {str(source[0])} 
        site_id: {str(source[1])} 
        name: {str(source[2])} 
        price: {str(source[3])}
        quantity: {str(source[4])} 
        thumbnail: {str(source[5])}
        date: {str(source[6])}
        \n'''


    em = EmailMessage()
    em['From'] = email_sender
    em['To'] = email_receiver
    em['Subject'] = subject
    em.set_content(body)

    # Add SSL (layer of security)
    context = ssl.create_default_context()

    # Log in and send the email
    with smtplib.SMTP_SSL('smtp.gmail.com', 465, context=context) as smtp:
        smtp.login(email_sender, email_password)
        smtp.sendmail(email_sender, email_receiver, em.as_string())


def _get_most_relevant_items():
    url = 'https://api.mercadolibre.com/sites/MLA/search?category=MLA1577#json'
    response = r.get(url).text
    response = json.loads(response)
    data = response['results']

    with open('microwave.tsv','w') as file:
        for item in data:
            _id = item.get('id')
            site_id = item.get('site_id')
            title = item.get('title')
            price = item.get('price')
            sold_quantity = item.get('sold_quantity')
            thumbnail = item.get('thumbnail')
            created_date = date.today()
            file.write(f"{_id}\t{site_id}\t{title}\t{price}\t{sold_quantity}\t{thumbnail}\t{created_date}\n")


def populate_m_table():
    postgres_hook = PostgresHook(postgre_conn_id='postgres_default', schema='airflow')
    postgres_hook.bulk_load('microwaves','/home/franco/microwave.tsv')

def get_7M_microwaves(ti):
    query = "SELECT * FROM microwaves WHERE sold_quantity*price > 7000000"
    pg_hook = PostgresHook(postgre_conn_id='postgres_default', schema='airflow')
    connection = pg_hook.get_conn()
    cursor = connection.cursor()
    cursor.execute(query)
    sources = cursor.fetchall()
    for source in sources:
        print(source)
    ti.xcom_push(key='microwaves_over_7M',value=sources)

with DAG(
    dag_id='ml_dag',
    start_date=datetime(2020, 2, 2),
    schedule="@once",
    catchup=False,
) as dag:
    create_pet_table = PostgresOperator(
        task_id="create_microwave_table",
        sql="""
            CREATE TABLE IF NOT EXISTS microwaves (
            item_id VARCHAR PRIMARY KEY,
            site_id VARCHAR NOT NULL,
            title VARCHAR NOT NULL,
            price REAL,
            sold_quantity INTEGER,
            thumbnail VARCHAR,
            created_date DATE );
          """,
    )
    fetch_mw_data = PythonOperator(
        task_id='select_mw_data', 
        python_callable = get_7M_microwaves
    )
    populate_table = PythonOperator(
        task_id='populate_table', 
        python_callable = populate_m_table
    )
    send_email = PythonOperator(
        task_id='send_email', 
        python_callable = _send_email
    )
    get_mw_data = PythonOperator(
        task_id='get_mw_data', 
        python_callable = _get_most_relevant_items
    )

    create_pet_table >> get_mw_data >> populate_table >> fetch_mw_data >> send_email
